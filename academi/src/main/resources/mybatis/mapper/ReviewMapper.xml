<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.ReviewMapper">
	<!-- 가장 최신 글의 번호를 가져옴 -->

	<select id="selectNo" resultType="int">
		select max(review_no) from
		review
	</select>

	<!-- 단일 후기글 보기 -->
	<select id="select" parameterType="int" resultMap="reviewRouteUsers">
		 select * from
		review r, users u, route rr 
    	where u.user_id=r.user_id 
    	and rr.route_no=r.route_no 
    	and review_no=#{reviewNo}
	</select>
	<!-- 후기 쓰기 -->
	<insert id="insert" parameterType="Map">
		insert into review
		(review_title,review_content0,
		review_content1,review_content2,review_content3,
		review_content4,review_content5,review_content6,
		review_content7,review_content8,review_content9,
		review_date,review_star,review_count,route_no,review_image,
		user_id) values
		(#{reviewTitle},#{reviewContent0},#{reviewContent1},
		#{reviewContent2},#{reviewContent3},#{reviewContent4},
		#{reviewContent5},#{reviewContent6},#{reviewContent7},
		#{reviewContent8},#{reviewContent9},
		sysdate,0,0,#{routeNo},#{reviewImage},#{userId})
	</insert>
	<!-- 후기글 수정 -->
	<update id="update" parameterType="Map">
		update review set
		review_title=#{reviewTitle},
		review_content0=#{reviewContent0},
		review_content1=#{reviewContent1},
		review_content2=#{reviewContent2},
		review_content3=#{reviewContent3},
		review_content4=#{reviewContent4},
		review_content5=#{reviewContent5},
		review_content6=#{reviewContent6},
		review_content7=#{reviewContent7},
		review_content8=#{reviewContent8},
		review_content9=#{reviewContent9},
		route_no=#{routeNo}
		where
		review_no=#{reviewNo}
	</update>
	<!-- 후기글 삭제 -->
	<delete id="delete" parameterType="int">
		delete from review where
		review_no=#{reviewNo}
	</delete>

	<!-- 한페이지에 4x4 인데 4x1은 추천이 높은것을 띄워줌 -->
	<select id="starReview" resultMap="reviewUsers">
		select *
		from(select
		sub.*,rownum
		rnum from
		(select * from review r
		join users u on
		u.user_id=r.user_id
		order by
		review_star desc)
		sub)
		where rnum
		between 1
		and 3
	</select>


	<!-- 페이지당 리스트를 보여줌 3x4니까 12개를 보여줘야함 -->
	<select id="selectList" parameterType="int" resultMap="reviewUsers">
		select *
		from(select sub.*,rownum rnum from
		(select * from review r
		join users u
		on u.user_id=r.user_id
		order by
		review_no desc) sub)
		where rnum
		between
		#{page}*9-8 and #{page}*9
	</select>


	<!-- 페이지당 리스트를 보여줌(분류별/이름/검색 ) -->
	<select id="searchListByName" parameterType="Map" resultMap="reviewUsers">
		select *
		from(select sub.*,rownum rnum from
		(select * from review r
		join
		users u on u.user_id=r.user_id
		where
		review_title like #{reviewTitle}
		order by review_no desc) sub)
		where
		rnum between #{page}*9-8 and
		#{page}*9
	</select>

	<!-- 페이지당 리스트를 보여줌(분류별/내용/검색 ) -->
	<select id="searchListByContent" parameterType="Map" resultMap="reviewUsers">
		select *
		from(select sub.*,rownum rnum from
		(select * from review r
		join
		users u on u.user_id=r.user_id
		where
		review_content0 like
		#{reviewContent} or
		review_content1 like #{reviewContent} or
		review_content2 like #{reviewContent} or
		review_content3 like
		#{reviewContent} or
		review_content4 like #{reviewContent} or
		review_content5 like #{reviewContent} or
		review_content6 like
		#{reviewContent} or
		review_content7 like #{reviewContent} or
		review_content8 like #{reviewContent} or
		review_content9 like
		#{reviewContent}
		order by review_no desc) sub)
		where rnum between
		#{page}*9-8 and #{page}*9

	</select>

	<!-- 페이지당 리스트를 보여줌(분류별/닉네임/검색 ) -->
	<select id="searchListByNick" parameterType="Map" resultMap="reviewUsers">
		select *
		from(select sub.*,rownum rnum from
		(select * from review r
		join
		users u on u.user_id = r.user_id
		where user_nick like #{userNick}
		order
		by review_no desc) sub)
		where rnum between #{page}*9-8 and #{page}*9
	</select>

	<!-- 페이지당 리스트를 보여줌(경로검색) -->
	<select id="searchListByRoute" parameterType="Map" resultMap="reviewRouteUsers">
		select * from
		(select sub.*,rownum rnum from (select * from route ro
		join REVIEW re on ro.ROUTE_NO=re.ROUTE_NO
		join users u on
		u.USER_ID=ro.user_id
		where route_full like #{route}
		order by review_no
		desc ) sub)
		where rnum between #{page}*9-8 and #{page}*9


	</select>


	<!-- 지도에서 쓸 경로 리스트를 보여줌(경로검색) -->
	<select id="mapAPIsearchRoute" parameterType="Map" resultMap="reviewRouteUsers">
		select * from
		(select sub.*,rownum rnum from (select * from route ro
		join REVIEW re on ro.ROUTE_NO=re.ROUTE_NO
		join users u on u.USER_ID=ro.user_id
		where
		route_full like #{keyword0} 
		<if test="keyword1 !=null">
		and route_full like #{keyword1}
		</if>
		<if test="keyword2 !=null">
		and route_full like #{keyword2}
		</if>
		<if test="keyword3 !=null">
		and route_full like #{keyword3}
		</if>
		<if test="keyword4 !=null">
		and route_full like #{keyword4}
		</if>
		<if test="keyword5 !=null">
		and route_full like #{keyword5}
		</if>
		<if test="keyword6 !=null">
		and route_full like #{keyword6}
		</if>
		order by review_star desc ) sub)
		where rnum between 1 and 3


	</select>


	<!-- 조회수 1을 증가시킴 -->
	<update id="countUpdate" parameterType="int">
		update review set
		review_count=
		(select review_count from review where
		review_no=#{reviewNo})+1
		where review_no = #{reviewNo}
	</update>
	<update id="starUpdate" parameterType="int">
		update review set
		review_star =
		(select review_star from review where
		review_no=#{reviewNo})+1
		where review_no=#{reviewNo}
	</update>
	<!-- 페이지 카운팅 -->
	<select id="pageCount" resultType="int">
		select count(*) from review
	</select>
	
	<!-- 아이디별 페이지 카운팅 -->
	<select id="pageCountbyId" parameterType="String" resultType="int">
		select count(*) from review where user_id=#{userId}
	</select>

	<!--후기테이블에서 내아이디로 조회 -->
	<select id="selectReviewById" parameterType="Map" resultMap="reviewUsers">
		select *
		from(select sub.*,rownum rnum from
		(select * from review r
		join users u
		on u.user_id=r.user_id
		where r.user_id = #{userId}
		order by
		review_no desc) sub)
		where rnum
		between
		#{page}*3-2 and #{page}*3
	</select>



	<resultMap type="review" id="reviewBase">
		<id column="review_no" property="reviewNo" />
		<result column="review_title" property="reviewTitle" />
		<result column="review_content0" property="reviewContent0" />
		<result column="review_content1" property="reviewContent1" />
		<result column="review_content2" property="reviewContent2" />
		<result column="review_content3" property="reviewContent3" />
		<result column="review_content4" property="reviewContent4" />
		<result column="review_content5" property="reviewContent5" />
		<result column="review_content6" property="reviewContent6" />
		<result column="review_content7" property="reviewContent7" />
		<result column="review_content8" property="reviewContent8" />
		<result column="review_content9" property="reviewContent9" />
		<result column="review_image" property="reviewImage" />
		<result column="review_date" property="reviewDate" />
		<result column="review_star" property="reviewStar" />
		<result column="review_count" property="reviewCount" />
		<result column="route_no" property="routeNo" />
		<result column="user_id" property="userId" />
	</resultMap>

	<resultMap type="review" id="reviewUsers" extends="reviewBase">
		<association property="users" column="user_id" javaType="users"
			resultMap="com.example.UserMapper.usersBase"></association>
	</resultMap>

	<resultMap type="review" id="reviewRouteUsers" extends="reviewUsers">
		<association property="route" column="route_no" javaType="route"
			resultMap="com.example.RouteMapper.routeBase"></association>
	</resultMap>
	
</mapper>